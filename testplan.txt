#Dear Reader, the following commands are written for my UNB account (shuttyt@gmail.com). You will have to find and replace that string for your own to make them work.
Also, you will need admin status, which requires you to access the database and set it in the users table. For security purposes only existing admins can make new admins.

-------------------------------
class SignIn(Resource):
-------------------------------
    # POST: login
curl -i -H "Content-Type: application/json" -X POST -d '{"email": "shuttyt@gmail.com", "password": "test"}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/signin
201
{
  "status": "success"
}

    # GET: Check if logged in
curl -i -H "Content-Type: application/json" -X GET -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/signin
200
{
  "status": "success"
}

    # DELETE: logout
curl -i -H "Content-Type: application/json" -X DELETE -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/signin
200
{
  "status": "success"
}
# GET again:
curl -i -H "Content-Type: application/json" -X GET -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/signin
403
{
  "status": "not logged in"
}
#login again to continue your journey:
curl -i -H "Content-Type: application/json" -X POST -d '{"email": "shuttyt@gmail.com", "password": "test"}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/signin

-------------------------------
class Users(Resource):
-------------------------------
    #POST: create account
    #email must match unb email to be able to access restricted resources
curl -i -H "Content-Type: application/json" -X POST -d '{"email": "shuttyt@gmail.com", "password": "test"}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users
201
{
  "uri": "https://127.0.0.1:5045/audio/users/shuttyt@gmail.com"
}
#Repeat command:
curl -i -H "Content-Type: application/json" -X POST -d '{"email": "shuttyt@gmail.com"}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users
409
{
  "status": "User exists."
}

    # GET: Only for admins, returns non admins
curl -i -H "Content-Type: application/json" -X GET -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users
200
{
  "users": [
    {
      "email": "lucky"
    }, 
    {
      "email": "p2@domain.com"
    }
  ]
}

-------------------------------
class User(Resource):
-------------------------------
    #Get user
    #curl -i -H "Content-Type: application/json" -X GET -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com
200
{
  "user": {
    "admin_status": 1, 
    "email": "shuttyt@gmail.com"
  }
}

    #Change email
curl -i -H "Content-Type: application/json" -X PATCH -d '{"email":"dum@poopie"}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com
200
{
  "status": "changed shuttyt@gmail.com to dum@poopie"
}
    #Change email back:
curl -i -H "Content-Type: application/json" -X PATCH -d '{"email":"shuttyt@gmail.com"}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/dum@poopie
200
{
  "status": "changed dum@poopie to shuttyt@gmail.com"
}

#delete user:
    #curl -i -H "Content-Type: application/json" -X DELETE -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com
200
{
  "status": "deleted shuttyt@gmail.com"
}
#repeat:
    #curl -i -H "Content-Type: application/json" -X DELETE -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com
403
{
  "status": "not logged in"
}
#sign back in and recreate user to continue your journey:
curl -i -H "Content-Type: application/json" -X POST -d '{"email": "shuttyt@gmail.com", "password": "test"}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/signin
curl -i -H "Content-Type: application/json" -X POST -d '{"email": "shuttyt@gmail.com"}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users

-------------------------------
class Authorize(Resource):
-------------------------------
    # /users/{email}/authorize
    # requires logged in user to have admin status, which requires the database to be manually set with an inital admin.
    # This is done for  security purposes.
    # If changing self, must logout first before changes take effect
    # make existing admin non admin
curl -i -H "Content-Type: application/json" -X PATCH -d '{"admin_status": 0}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/p2@domain.com/authorize
200
    # {
    #   "status": "updated p2@domain.com"
    # }
    # repeat command
curl -i -H "Content-Type: application/json" -X PATCH -d '{"admin_status": 0}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/p2@domain.com/authorize
200
    # {
    #   "status": "no change to p2@domain.com"
    # }
    # make existing non admin admin
200
curl -i -H "Content-Type: application/json" -X PATCH -d '{"admin_status": 1}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/person@domain.com/authorize
    # {
    #   "status": "updated person@domain.com"
    # }

-------------------------------
class Folders(Resource):
-------------------------------
    # create root folder
curl -i -H "Content-Type: application/json" -X POST -d '{"folder_name": "hotdogs","folder_description":"pink", "parent":0}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/folders
201
{
  "uri": "https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/folders/4"
}
    # create subfolder
curl -i -H "Content-Type: application/json" -X POST -d '{"folder_name": "hamburgers","folder_description":"purple","parent":4}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/folders
201
{
  "uri": "https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/folders/5"
}

    #GET all folder ids matching string
curl -i -H "Content-Type: application/json" -X GET -c cookie-jar -b cookie-jar -k "https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/folders?string=%"
200
{
  "folders": [
    {
      "folder_id": 4
    }, 
    {
      "folder_id": 5
    }
  ]
}

-------------------------------
class Folder(Resource):
-------------------------------
#GET a folder
curl -i -H "Content-Type: application/json" -X GET -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/folders/4
200
{
  "folder": {
    "folder_description": "pink", 
    "folder_id": 4, 
    "folder_name": "hotdogs", 
    "owner_email": "shuttyt@gmail.com", 
    "parent": 0
  }
}
# GET a different users folder (as a non-admin):
curl -i -H "Content-Type: application/json" -X GET -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/person@domain.com/folders/1
403
{
  "status": "not logged in as person@domain.com and not admin"
}
#GET a folder that doesn't exist:
curl -i -H "Content-Type: application/json" -X GET -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/folders/100
404
{
  "status": "no folder"
}

#PATCH folder:
curl -i -H "Content-Type: application/json" -X PATCH -d '{"name":"nice","description":"blue"}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/folders/4
200
{
  "status": "folder updated"
}
#Repeat command:
curl -i -H "Content-Type: application/json" -X PATCH -d '{"name":"nice","description":"blue"}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/folders/4
200
{
  "status": "no change to shuttyt@gmail.com"
}

GET folder again:
curl -i -H "Content-Type: application/json" -X GET -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/folders/4
200
{
  "folder": {
    "folder_description": "blue", 
    "folder_id": 4, 
    "folder_name": "nice", 
    "owner_email": "shuttyt@gmail.com", 
    "parent": 0
  }
}

#DELETE folder:
curl -i -H "Content-Type: application/json" -X DELETE -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/folders/5
200
{
  "status": "deleted 5"
}

-------------------------------
class Files(Resource):
-------------------------------
 #POST: create file
    echo hi > myfile.txt
    curl -i -X POST --form file_description="5:00" --form parent=4 --form "file=@myfile.txt" -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/files
201
{
  "uri": "https://localhost:504/users/shuttyt@gmail.com/files/4"
}
#Try to create with invalid parent:
curl -i -X POST --form file_description="5:00" --form parent=10 --form "file=@myfile.txt" -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/files
400
{
  "status": "(1644, 'Unable to create the file.')"
}

#GET all matching file ids
curl -i -H "Content-Type: application/json" -X GET -c cookie-jar -b cookie-jar -k "https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/files?string=my%"
200
{
  "files": [
    {
      "file_id": 4
    }
  ]
}

-------------------------------
class File(Resource):
-------------------------------
#GET file record
curl -i -H "Content-Type: application/json" -X GET -c cookie-jar -b cookie-jar -k "https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/files/4?stream=false"
200
{
  "file": {
    "file_description": "5:00", 
    "file_id": 4, 
    "file_name": "myfile.txt", 
    "last_played": null, 
    "owner_email": "shuttyt@gmail.com", 
    "parent": 4, 
    "times_played": 0, 
    "upload_date": "Sun, 28 Mar 2021 19:26:07 GMT"
  }
}
#GET file stream
curl -i -H "Content-Type: application/json" -X GET -c cookie-jar -b cookie-jar -k "https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/files/4?stream=true"
200
hi

#PATCH file record:
curl -i -H "Content-Type: application/json" -X PATCH -d '{"name":"song2.mp3","description":"Blur","plays_count":3000,"last_played":"2021-03-26 18:32:48","parent":4}' -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/files/4
200
{
  "status": "file updated"
}

#DELETE file
curl -i -H "Content-Type: application/json" -X DELETE -c cookie-jar -b cookie-jar -k https://127.0.0.1:5045/audio/users/shuttyt@gmail.com/files/4
200
{
  "status": "deleted 4"
}
