openapi: 3.0.0
info:
  title: Audīsne mē?
  description: Create an account, create folders, upload files, play files, modify files, and download files.
  version: '0.2.0'

servers: 
 - url: https://tyeshutty.tk/audio

tags:
  - name: admins
    description: Secured Admin-only calls. Admins also have access to logged in user and logged out user calls.
  - name: logged in users
    description: Operations available to logged in users. Logged in users also have access to logged out user calls.
  - name: logged out users
    description: Operations available to users not logged in
    
#password creation, management, and authentication will be handled by UNB's server if the app is run from a UNB domain
#otherwise, it is handled in the app.
#email is the user ID. If a path has {email} in it, then only that means each user can only access the resources associated with them, not other users. Except admins, which can use all {email} path possibilities.
#cd ~/codebase/swagger-editor-master
#sudo npm run dev
#open http://0.0.0.0:3200

paths:
  /:
    get:
      tags:
        - logged out users 
      summary: Returns a single page application with much of the API functionality built in.
      responses:
        '200':
          description: HTML and associated assets returned
  /info:
    get:
      tags:
        - logged out users 
      summary: Returns this documentation.
      responses:
        '200':
          description: HTML and associated assets returned
  /users:
    post:
      tags:
        - logged out users
      summary: Creates a user and root folder. Only first user is automatically given admin status.
      requestBody:
        required: true 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentials'
      responses:
        '201':
          description: Created
        '409':
          description: User email already in use
        '400':
          description: Invalid email
    get:
      tags:
        - admins
      summary: Returns a list of user emails. Does not include admins.
      responses:
        '200':
          description: A JSON object of emails
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/emails'
        '403':
          description: Not logged in or not admin
  /users/{email}:
    patch:
      tags:
        - logged in users
      summary: Updates a user email
      parameters:
        - name: email
          in: path 
          required: true 
          description: old email
          schema:
            type: string 
      requestBody:
        required: true 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/email'
      responses:
        '204':
          description: email changed
        '200':
          description: No change to email
        '400':
          description: Invalid email
        '403':
          description: Not logged in as user or not admin
    get:
      tags:
        - logged in users
      summary: Returns admin status and root folder_id
      parameters:
        - name: email
          in: path 
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Invalid email
        '403':
          description: Not logged in as user or not admin
    delete:
      tags:
        - logged in users
      description: Delete a user but not all associated folders and files
      parameters:
        - name: email
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/email'
      responses:
        '200':
          description: Successfully deleted a user or user not found
        '403':
          description: Not logged in as user or not admin
  /users/{email}/authorize:
    patch:
      tags:
        - admins
      summary: Changes the admin status of a user
      parameters:
        - name: email
          in: path 
          required: true 
          description: email whose status is being changed
          schema:
            type: string
      requestBody:
        required: true 
        description: new status (if admin, then 1)
        content:
          application/json:
            schema:
              type: integer
              format: int64
              minimum: 0
              maximum: 1
      responses:
        '200':
          description: Admin status changed
        '400':
          description: Invalid admin status variable
        '404':
          description: Email not found
        '403':
          description: Not logged in as user or not admin
  /users/{email}/folders:
    post:
      tags:
        - logged in users
      summary: Creates a folder. "parent" is folder_id of parent folder.
      parameters:
        - name: email
          in: path 
          required: true 
          schema:
            type: string 
      requestBody:
        required: true 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/created_folder_info'
      responses:
        '201':
          description: Created
        '400':
          description: Invalid parameters
        '403':
          description: Not logged in as user or not admin
    get:
      tags:
        - logged in users
      summary: Returns folder_ids matching a string in name or description. If % string provided, returns all user folders.
      parameters:
        - name: email
          in: path 
          required: true 
          schema:
            type: string
        - name: search_string
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Matching folder_ids returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/folder_ids'
        '403':
          description: Not logged in as user or not admin
  /users/{email}/folders/{folder_id}:
    patch:
      tags:
        - logged in users
      summary: Modifies a folder name and description
      parameters:
        - name: folder_id
          in: path 
          required: true 
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: email
          in: path 
          required: true 
          schema:
            type: string
      requestBody:
        required: true 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modified_folder_info'
      responses:
        '204':
          description: Updated
        '200':
          description: No change
        '400':
          description: Invalid request
        '403':
          description: Not logged in as user or not admin
        '404':
          description: No user folder
    get:
      tags:
        - logged in users
      summary: Gets a folder 
      parameters:
        - name: folder_id
          in: path 
          required: true 
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: email
          in: path 
          required: true 
          schema:
            type: string
      responses:
        '200':
          description: Resource returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/folder_info'
        '400':
          description: Invalid parameters
        '403':
          description: Not logged in as user or not admin
        '404':
          description: No user folder
    delete:
      tags:
        - logged in users
      description: Delete a folder and all contents
      parameters:
        - name: folder_id
          in: path 
          required: true 
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: email
          in: path 
          required: true 
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted a folder or no folder
        '403':
          description: Not logged in as user or not admin
  /users/{email}/files:
    post:
      tags:
        - logged in users
      summary: Uploads a file and creates a file record
      parameters:
        - name: email
          in: path 
          required: true 
          schema:
            type: string
      requestBody:
        required: true 
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/new_file_info'
      responses:
        '201':
          description: File uploaded and created
        '400':
          description: Invalid parameters
        '403':
          description: Not logged in as user or not admin
    get:
      tags:
        - logged in users
      summary: Returns file_ids matching a string in name or description of a user owned file. If "%" provided, returns all user file_ids
      parameters:
        - name: email
          in: path 
          required: true 
          schema:
            type: string
        - name: string
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Matching file_ids returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file_ids'
        '403':
          description: Not logged in as user or not admin
  /users/{email}/files/{file_id}:
    patch:
      tags:
        - logged in users
      summary: Modifies a file name, location, description, number of plays, or last play time
      parameters:
        - name: file_id
          in: path 
          required: true 
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: email
          in: path 
          required: true 
          schema:
            type: string
      requestBody:
        required: true 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modified_file_info'
      responses:
        '204':
          description: File record modified
        '200':
          description: File record unchanged
        '400':
          description: Invalid parameters
        '404':
          description: File not found
        '403':
          description: Not logged in as user or not admin
    get:
      tags:
        - logged in users
      summary: Gets a file record or file stream
      parameters:
        - name: file_id
          in: path 
          required: true 
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: email
          in: path 
          required: true 
          schema:
            type: string
        - name: stream
          in: query
          required: false 
          description: true or false
          schema:
            $ref: '#/components/schemas/boolean'
      responses:
        '200':
        # swagger does not allow for describing multiple output types, although many people think this is an ok thing to do
        # https://github.com/OAI/OpenAPI-Specification/issues/270
          description: If stream=true, returns the file, else returns the schema described below
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/returned_file_info'
        '404':
          description: Invalid parameters
        '403':
          description: Not logged in as user or not admin
    delete:
      tags:
        - logged in users
      description: Delete a file record and file binary
      parameters:
        - name: file_id
          in: path 
          required: true 
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: email
          in: path 
          required: true 
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted a file
        '200':
          description: No file
        '403':
          description: Not logged in as user or not admin

  /signin:
    post:
      tags:
        - logged out users
      summary: Log into system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentials'
      responses:
        '201':
          description: successfully logged in
        '200':
          description: already logged in
        '400':
          description: bad request
        '403':
          description: access denied
    get:
      tags:
        - logged out users
      summary: Get log in status/log out status
      responses:
        '200':
          description: logged in
        '403':
          description: not logged in
    delete:
      tags:
        - logged out users
      summary: Log out of system
      responses:
        '200':
          description: successfully logged out
         
components:
  schemas:
    email:
      type: string
    emails:
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
      example: 
        users:
          - email: lucky
          - email: p2@domain.com
        
    folder_ids:
      type: object
      properties:
        folders:
          type: array
          items:
            type: object
            properties:
              folder_id:
                type: number
      example: 
        folders:
          - folder_id: 4
          - folder_id: 5
    file_ids:
      type: object
      properties:
        folders:
          type: array
          items:
            type: object
            properties:
              file_id:
                type: number
      example: 
        files:
          - file_id: 4
          - file_id: 5
      
    user:
      type: object
      properties:
        user:
          type: object
          properties:
            admin_status:
              type: number
            email:
              type: string
      example: {"email": "lucky", "admin_status": 1 }
    boolean:
      type: boolean
    modified_folder_info:
      type: object
      properties:
        name:
          type: string
        description:
          type: string 
      example:
        name: rock music
        description: music made out of rocks
    created_folder_info:
      type: object
      properties:
        folder_name:
          type: string
        parent:
          type: number
        folder_description:
          type: string 
      example:
        folder_name: rock music
        parent: 1
        folder_description: music made out of rocks
    folder_info:
      type: object 
      properties:
        folder:
          type: object
          properties:
            folder_description:
              type: string
            folder_id:
              type: number
            folder_name:
              type: string 
            owner_email:
              type: string 
            parent:
              type: number 
      example: 
        folder:
          folder_description: pink
          folder_id: 4
          folder_name: hotdogs
          owner_email: tshutty@unb.ca
          parent: 0
    new_file_info:
      type: object
      properties:
        file_description:
          type: string
        parent:
          type: number
        file:
          type: string
          format: binary
      example:
        description: A song by Rush
        file: RickSawyer.mp3
        folder: 4
    modified_file_info:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        plays_count:
          type: number
        last_played:
          type: string
        parent:
          type: number
      example:
        name: song2.mp3
        description: Blur
        plays_count: 3000
        last_played: '2021-03-26 18:32:48'
        parent: 4
    returned_file_info:
      type: object 
      properties:
        file:
          type: object
          properties:
            file_description:
              type: string
            file_id:
              type: number
            file_name:
              type: string 
            owner_email:
              type: string 
            parent:
              type: number
            times_played:
              type: number
            upload_date:
              type: string
      example:
        file:
          file_description: '5:00'
          file_id: 4
          file_name: myfile.txt
          last_played: 'Sun, 28 Mar 2021 19:26:07 GMT'
          owner_email: tshutty@unb.ca
          parent: 4
          times_played: 0
          upload_date: 'Sun, 28 Mar 2021 19:26:07 GMT'
        
    credentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        username: tshutty
        password: gorilla
